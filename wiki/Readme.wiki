#summary Please read this document first.
#labels Phase-Design,Featured

= C++ Header Library of DAWG Dictionary Algorithm =

== Introduction ==

This project provides a library *dawgdic* for building and accessing
dictionaries implemented with directed acyclic word graphs (DAWG).

A dawg is constructed by minimizing a trie
as a deterministic finite automaton (DFA)
and thus it has an advantage in memory usage.
In addition, *dawgdic* uses a double-array as a base data structure,
so its retrieval speed is as fast as that of *Darts*,
a library for building and accessing double-array tries.

 * Documentation
  * [Readme]: Please read this document first.
   * [HowToBuild]: An example to build a dictionary from a sorted lexicon.
   * [HowToLookup]: An example to lookup keys in a dictionary.
  * [Interface]: This document provides class interfaces.
  * [Algorithm]

----

== How To Install ==

=== Basic Installation ===

In Linux, please follow the basic installation process below:

{{{
./configure
make
make install
}}}

This process installs two commands, *make-dawgdic* and *dawgdic*,
and headers *<nanika/ios/`*`.h>* and *<nanika/dawgdic/`*`.h>* as a C++ header library.
Outline of commands and headers are given as follows:

 * Commands
  * *make-dawg*
   * Builds a dictionary from a lexicon.
   * Keys must be divided by line separaters(LF).
   * Keys must be sorted in dictionary order.
  * *dawgdic*
   * Finds keys in prefixes of each input line.
 * Headers
  * *<nanika/ios/`*`.h>*
   * Defines a class for accelerating the speed of reading lines.
  * *<nanika/dawgdic/`*`.h>*
   * Defines classes for building a dictionary from a lexicon.
   * Defines classes for finding keys in a dictionary.

=== Without Installation ===

If you want to use *dawgdic* on Windows or without installation.
Please copy headers in src/nanika/dawgdic to
include directory or your project directory.

----

== How To Use ==

=== Bulding Dictionary ===

The construction process is given as follows:

 # Dawg construction
  * Builds a simple dawg from a lexicon.
   * Keys must be inserted in dictionary order or reverse dictionary order.
   * *nanika::dawgdic::!DawgBuilder* is a class for building a simple dawg.
   * *nanika::dawgdic::Dawg* is a simple dawg class.
 # Dawg conversion
  * Transforms a simple dawg into a dictionary.
   * *nanika::dawgdic::!DictionaryBuilder* is a class for building a dictionary.
   * *nanika::dawgdic::Dictionary* is a dictionary class.

The following sample code builds a dictionary from a lexicon
which consists of keys "apple" and "orange" without records.
In fact, the default value 0 is attached to the keys.
If you want to give a record to a key other than the default value,
please pass a record to a member function *Insert()*
of *nanika::dawgdic::!DawgBuilder* as the 2nd or 3rd argument.

{{{
#include <ofstream>

#include <nanika/dawgdic/dawg-builder.h>
#include <nanika/dawgdic/dictionary-builder.h>

nanika::dawgdic::DawgBuilder dawg_builder;
dawg_builder.Insert("apple");
dawg_builder.Insert("orange");

nanika::dawgdic::Dawg dawg;
dawg_builder.Finish(&dawg);

nanika::dawgdic::Dictionary dic;
nanika::dawgdic::DictionaryBuilder::Build(dawg, &dic);

// Writes a dictionary into a file "test.dic".
std::ofstream dic_file("test.dic", ios::binary);
dic.Write(&dic_file);
}}}

=== Accessing Dictionary ===

The following sample code gives the way of simple dictionary lookups.
If you need to find keys in prefixes of an input string,
please use a class *nanika::dawgdic::!DictionaryExplorer* in addition to
*nanika::dawgdic::Dictionary*.

{{{
#include <ifstream>
#include <iostream>

#include <nanika/dawgdic/dictionary.h>

// Reads a dictionary from a file "test.dic".
std::ifstream dic_file("test.dic", ios::binary);
nanika::dawgdic::Dictionary dic;
dic.Read(&dic_file);

if (dic.Contains("apple"))
  std::cout << "apple: found" << std::endl;
if (dic.Find("banana") < 0)
  std::cout << "banana: not found" << std::endl;
}}}

----

== References ==

=== Related Papers ===

 # Aoe, J.: *An Efficient Digital Search Algorithm by Using a Double-Array Structure*.
  * _IEEE Transactions on Software Engineering_ *15*(9) (September 1989) 1066-1077
 # Aoe, J., Morimoto, K., Sato, T.: *An Efficient Implementation of Trie Structures*.
  * _Software: Practice and Experience_, *22*(9) (September 1992) 695-721
 # Daciuk, J., Watson, B.W., Mihov, S., Watson, R.E.: *Incremental Construction of Minimal Acyclic Finite-State Automata*.
  * _Computational Linguistics_ *26*(1) (March 2000) 3-16
 # Morita, K., Fuketa, M., Yamakawa, Y. and Aoe, J.: *Fast insertion methods of a double-array structure*.
  * _Software: Practice and Experience_ *31*(1) (January 2001) 43-65
 # Ciura, M.G., Deorowicz, S.: *How to squeeze a lexicon*.
  * _Software: Practice and Experience_ *31*(11) (September 2001) 1077-1090
 # Yata, S., Oono, M., Morita, K., Fuketa, M., Sumitomo, T. and Aoe, J.: *A compact static double-array keeping character codes*.
  * _Information Processing and Management_ *43*(1) (January 2007) 237-247
 # Yata, S., Morita, K., Fuketa, M., Aoe, J.: *Fast String Matching with Space-efficient Word Graphs*.
  * _Innovations in Information Technology (Innovations '08)_ Al Ain, United Arab Emirates (December 2008) 79-83

=== Related Web Pages ===

 # Jan Daciuk: *Jan Daciuk, Dept of Knowledge Engineering, Gdansk University of Technology*
  * http://www.eti.pg.gda.pl/katedry/kiw/pracownicy/Jan.Daciuk/personal/
 # Sam Allen: *C# Directed Acyclic Word Graph*
  * http://dotnetperls.com/Content/Directed-Acyclic-Word-Graph.aspx
 # Wutka Consulting, Inc.: *Directed Acyclic Word Graphs*
  * http://www.wutka.com/dawg.html