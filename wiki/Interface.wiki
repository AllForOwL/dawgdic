#summary This document provides class interfaces.

= Interfaces of DAWG Dictionary Library =

== Main Interfaces ==

The main classes of this library are given as follows:

|| *Header* || *Namespace* || *Class* ||
|| dawgdic/dawg.h || dawgdic || Dawg ||
|| dawgdic/dawg-builder.h || dawgdic || !DawgBuilder ||
|| dawgdic/dictionary.h || dawgdic || Dictionary ||
|| dawgdic/dictionary-builder.h || dawgdic || !DictionaryBuilder ||
|| dawgdic/guide.h || dawgdic || Guide ||
|| dawgdic/guide-builder.h || dawgdic || !GuideBuilder ||
|| dawgdic/completer.h || dawgdic || Completer ||
|| dawgdic/ranked-guide.h || dawgdic || RankedGuide ||
|| dawgdic/ranked-guide-builder.h || dawgdic || !RankedGuideBuilder ||
|| dawgdic/ranked-completer.h || dawgdic || !RankedCompleter ||

----

== Dawg ==

|| *Header* || dawgdic/dawg.h ||
|| *Namespace* || dawgdic ||

{{{
// Numbers of transitions and states.
SizeType size() const;
SizeType num_of_transitions() const;
SizeType num_of_states() const;
}}}

These functions return the number of transitions or states in a dawg.

{{{
// Numbers of merged transitions and states.
SizeType num_of_merged_transitions() const;
SizeType num_of_merged_states() const;
}}}

These functions return the number of transitions or states merged
in building a dawg.

----

== !DawgBuilder ==

|| *Header* || dawgdic/dawg-builder.h ||
|| *Namespace* || dawgdic ||

{{{
// Numbers of transitions and states.
SizeType size() const;
SizeType num_of_transitions() const;
SizeType num_of_states() const;
}}}

These functions return the number of transitions or states in a dawg.

{{{
// Numbers of merged transitions and states.
SizeType num_of_merged_transitions() const;
SizeType num_of_merged_states() const;
}}}

These functions return the number of transitions or states merged
in building a dawg.

{{{
// Inserts a key into a dawg.
bool Insert(const CharType *key, ValueType value = 0);
bool Insert(const CharType *key, SizeType length, ValueType value);
}}}

This function inserts a *key* into a dawg.
A zero-*length* *key* is not allowed to be inserted.
Also, keys must be inserted in lexicographic order and
a *value* must be 0 or a positive integer.

{{{
// Finishes building a dawg.
bool Finish(Dawg *dawg);
}}}

This function finishes building a dawg and updates *dawg*.
Then, *this* object will be initialized.

----

== Dictionary ==

|| *Header* || dawgdic/dictionary.h ||
|| *Namespace* || dawgdic ||

{{{
const DictionaryUnit *units() const;
}}}

This function returns a pointer to a buffer for double-array elements.

{{{
SizeType size() const;
}}}

This function returns the number of double-array elements.

{{{
SizeType total_size() const;
}}}

This function returns the number of bytes allocated to double-array elements.

{{{
SizeType file_size() const;
}}}

This function returns the number of bytes written by the function *Write()*.

{{{
// Reads a dictionary from an input stream.
bool Read(std::istream *input);
}}}

This function reads a double-array from an *input* stream.

{{{
// Writes a dictionry into an output stream.
bool Write(std::ostream *output) const;
}}}

This function writes a double-array into an *output* stream.

{{{
// Exact matching.
bool Contains(const CharType *key) const;
bool Contains(const CharType *key, SizeType length) const;
}}}

This function performs a dictionary lookup and
returns whether a *key* exists in a dictionary or not.

{{{
// Exact matching.
ValueType Find(const CharType *key) const;
ValueType Find(const CharType *key, SizeType length) const;
bool Find(const CharType *key, ValueType *value) const;
bool Find(const CharType *key, SizeType length, ValueType *value) const;
}}}

This function performs a dictionary lookup and
returns a *value* of a *key*.
If a *key* does not exist in a dictionary,
this function returns -1 as a *value*.

{{{
// Prefix matching.
BaseType root() const;
bool has_value(BaseType index) const;
ValueType value(BaseType index) const;
bool Follow(CharType label, BaseType *index) const;
bool Follow(const CharType *s, BaseType *index);
bool Follow(const CharType *s, BaseType *index, SizeType *count);
bool Follow(const CharType *s, SizeType length, BaseType *index);
bool Follow(const CharType *s, SizeType length, BaseType *index, SizeType *count);
}}}

These functions are provided for prefix matching.
First, an index must be initialized by using *root()*.
Then, the functions *Follow()* follow transitions with a given *label* or
labels in a given string *s*.
A function *has_value()* returns whether a current state
has an out-transition to a terminal or not.
Also, a function *value()* returns a value in a corresponding terminal.

{{{
// Maps memory with its size.
void Map(const void *address);
}}}

This function maps a given *address* to a buffer of double-array elements.
The first 4 bytes are used as the buffer size.

{{{
// Maps memory with its size.
void Map(const void *address, SizeType size);
}}}

This function maps a given *address* to a buffer of double-array elements.

----

== !DictionaryBuilder ==

|| *Header* || dawgdic/dictionary-builder.h ||
|| *Namespace* || dawgdic ||

{{{
// Builds a dictionary from a dawg.
static bool Build(const Dawg &dawg, Dictionary *dic, BaseType *num_of_unused_units = NULL);
}}}

This function builds a dictionary from a *dawg*,
and then updates *dic* and *num_of_unused_units*.
After that, *this* object will be initialized.

----

== Guide ==

|| *Header* || dawgdic/guide.h ||
|| *Namespace* || dawgdic ||

{{{
// Reads a completion dictionary from an input stream.
bool Read(std::istream *input);
}}}

This function reads a completion dictionary from an *input* stream.

{{{
// Writes a dictionry into an output stream.
bool Write(std::ostream *output) const;
}}}

This function writes a completion dictionary into an *output* stream.

----

== !GuideBuilder ==

|| *Header* || dawgdic/guide-builder.h ||
|| *Namespace* || dawgdic ||

{{{
// Builds a completion dictionary from a dawg and a dictionary.
static bool Build(const Dawg &dawg, const Dictionary &dic, Guide *guide);
}}}

This function builds a completion dictionary from
a pair of *dawg* and *dic*, and then updates *guide*.

----

== Completer ==

|| *Header* || dawgdic/completer.h ||
|| *Namespace* || dawgdic ||

{{{
// Initializes an object.
Completer();
Completer(const Dictionary &dic, const Guide &guide);
}}}

Initializes an object for completing keys from a given prefix.
The completion process requires a base dictionary *dic* and
its corresponding completion dictionary *guide*.

{{{
// Sets a base dictionary or a completion dictionary.
void set_dic(const Dictionary &dic);
void set_guide(const Guide &guide);
}}}

These functions sets a base dictionary and
its corresponding completion dictionary.

{{{
// Gets a reference to a base dictionary or a completion dictionary.
const Dictionary &dic() const;
const Guide &guide() const;
}}}

These functions return references to
a base dictionary and a completion dictionary.

{{{
// Begins key completion.
void Start(BaseType index, const char *prefix = "");
void Start(BaseType index, const char *prefix, SizeType length);
}}}

Prepares for completing keys from a given *index*.
The other argument *prefix* is just returned as
the prefix of completed keys.

{{{
// Gets the next completion result.
bool Next();
}}}

This function incrementally gets completion results.

{{{
// Gets information of a completed key.
const char *key() const;
SizeType length() const;
ValueType value() const;
}}}

The function *key()* returns a pointer to a completed key (zero terminated),
and the function *length()* returns the key length.
Also, the function *value()* return the key record.

----

== !RankedGuide ==

|| *Header* || dawgdic/ranked-guide.h ||
|| *Namespace* || dawgdic ||

See *Guide*.

----

== !RankedGuideBuilder ==

|| *Header* || dawgdic/ranked-guide-builder.h ||
|| *Namespace* || dawgdic ||

See *!GuideBuilder*.

----

== !RankedCompleter ==

|| *Header* || dawgdic/ranked-completer.h ||
|| *Namespace* || dawgdic ||

See *Completer*.
