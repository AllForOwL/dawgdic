#summary This document provides class interfaces.

= Interfaces of DAWG Dictionary Library =

== Main Interfaces ==

The main classes of this library are given as follows:

|| *Header* || *Namespace* || *Class* ||
|| dawgdic/dawg.h || dawgdic || Dawg ||
|| dawgdic/dawg-builder.h || dawgdic || !DawgBuilder ||
|| dawgdic/dictionary.h || dawgdic || Dictionary ||
|| dawgdic/dictionary-builder.h || dawgdic || !DictionaryBuilder ||

----

== Dawg ==

|| *Header* || dawgdic/dawg.h ||
|| *Namespace* || dawgdic ||

{{{
// Numbers of transitions and states.
SizeType size() const;
SizeType num_of_transitions() const;
SizeType num_of_states() const;
}}}

These functions return the number of transitions or states in a dawg.

{{{
// Numbers of merged transitions and states.
SizeType num_of_merged_transitions() const;
SizeType num_of_merged_states() const;
}}}

These functions return the number of transitions or states merged
in building a dawg.

----

== !DawgBuilder ==

|| *Header* || dawgdic/dawg-builder.h ||
|| *Namespace* || dawgdic ||

{{{
// Numbers of transitions and states.
SizeType size() const;
SizeType num_of_transitions() const;
SizeType num_of_states() const;
}}}

These functions return the number of transitions or states in a dawg.

{{{
// Numbers of merged transitions and states.
SizeType num_of_merged_transitions() const;
SizeType num_of_merged_states() const;
}}}

These functions return the number of transitions or states merged
in building a dawg.

{{{
// Inserts a key into a dawg.
bool Insert(const CharType *key, ValueType value = 0);
bool Insert(const CharType *key, SizeType length, ValueType value);
}}}

This function inserts a *key* into a dawg.
A zero-*length* *key* is not allowed to be inserted.
Also, keys must be inserted in lexicographic order and
a *value* must be 0 or a positive integer.

{{{
// Finishes building a dawg.
bool Finish(Dawg *dawg);
}}}

This function finishes building a dawg and updates *dawg*.
Then, *this* object will be initialized.

----

== Dictionary ==

|| *Header* || dawgdic/dictionary.h ||
|| *Namespace* || dawgdic ||

{{{
const DictionaryUnit *units() const;
}}}

This function returns a pointer to a buffer for double-array elements.

{{{
SizeType size() const;
}}}

This function returns the number of double-array elements.

{{{
SizeType total_size() const;
}}}

This function returns the number of bytes allocated to double-array elements.

{{{
// Reads a dictionary from an input stream.
bool Read(std::istream *input);
}}}

This function reads a double-array from an *input* stream and
restores a double-array.

{{{
// Writes a dictionry into an output stream.
bool Write(std::ostream *output) const;
}}}

This function writes a double-array into an *output* stream.

{{{
// Exact matching.
bool Contains(const CharType *key) const;
bool Contains(const CharType *key, SizeType length) const;
}}}

This function performs a dictionary lookup and
returns whether a *key* exists in a dictionary or not.

{{{
// Exact matching.
ValueType Find(const CharType *key) const;
ValueType Find(const CharType *key, SizeType length) const;
bool Find(const CharType *key, ValueType *value) const;
bool Find(const CharType *key, SizeType length, ValueType *value) const;
}}}

This function performs a dictionary lookup and
returns a *value* of a *key*.
If a *key* does not exist in a dictionary,
this function returns -1 as a *value*.

{{{
// Prefix matching.
BaseType root() const;
bool has_value(BaseType index) const;
ValueType value(BaseType index) const;
bool Follow(CharType label, BaseType *index) const;
bool Follow(const CharType *s, BaseType *index);
bool Follow(const CharType *s, BaseType *index, SizeType *count);
bool Follow(const CharType *s, SizeType length, BaseType *index);
bool Follow(const CharType *s, SizeType length, BaseType *index, SizeType *count);
}}}

These functions are provided for prefix matching.
First, an index must be initialized by using *root()*.
Then, the functions *Follow()* follow transitions with a given *label* or
labels in a given string *s*.
A function *has_value()* returns whether a current state
has an out-transition to a terminal or not.
Also, a function *value()* returns a value in a corresponding terminal.

{{{
// Maps memory with its size.
void Map(const void *address);
}}}

This function maps a given *address* to a buffer of double-array elements.
The first 4 bytes are used as the buffer size.

{{{
// Maps memory with its size.
void Map(const void *address, SizeType size);
}}}

This function maps a given *address* to a buffer of double-array elements.

----

== !DictionaryBuilder ==

|| *Header* || dawgdic/dictionary-builder.h ||
|| *Namespace* || dawgdic ||

{{{
// Builds a dictionary from a dawg.
static bool Build(const Dawg &dawg, Dictionary *dic, BaseType *num_of_unused_units = NULL);
}}}

This function builds a dictionary from a *dawg*,
and then updates *dic* and *num_of_unused_units*.
After that, *this* object will be initialized.
