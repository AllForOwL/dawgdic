#summary クラスのインタフェース．

= ライブラリのインタフェース =

== 主要なインタフェース ==

ライブラリ *dawgdic* の提供する主なクラスを以下に示す．

|| *Header* || *Namespace* || *Class* ||
|| nanika/dawgdic/dawg.h || nanika::dawgdic || Dawg ||
|| nanika/dawgdic/dawg-builder.h || nanika::dawgdic || !DawgBuilder ||
|| nanika/dawgdic/dictionary.h || nanika::dawgdic || Dictionary ||
|| nanika/dawgdic/dictionary-builder.h || nanika::dawgdic || !DictionaryBuilder ||
|| nanika/dawgdic/dictionary-explorer.h || nanika::dawgdic || !DictionaryExplorer ||
|| nanika/ios/line-reader.h || nanika::ios || !LineReader ||

----

== Dawg ==

|| *Header* || nanika/dawgdic/dawg.h ||
|| *Namespace* || nanika::dawgdic ||

{{{
// 遷移数．
SizeType size() const;
SizeType num_of_transitions() const;
}}}

DAWG を構成する遷移の数を返す．

{{{
// 状態数．
SizeType num_of_states() const;
}}}

DAWG を構成する状態の数を返す．

{{{
// 併合された状態の数．
SizeType num_of_merged_states() const;
}}}

DAWG の構築において併合された状態の数を返す．

----

== !DawgBuilder ==

|| *Header* || nanika/dawgdic/dawg-builder.h ||
|| *Namespace* || nanika::dawgdic ||

{{{
// 遷移数．
SizeType size() const;
SizeType num_of_transitions() const;
}}}

構築中の DAWG を構成する遷移の数を返す．

{{{
// 状態数．
SizeType num_of_states() const;
}}}

構築中の DAWG を構成する状態の数を返す．

{{{
// 併合された状態の数．
SizeType num_of_merged_states() const;
}}}

呼び出し時までに併合された状態の数を返す．

{{{
// キーを DAWG に追加する．
bool Insert(const CharType *key, ValueType value = 0);
bool Insert(const CharType *key, SizeType length, ValueType value);
}}}

これらの関数は，キー *key* を DAWG に追加する．
長さ *length* が 0 のキーは追加することができない．
また，キーは辞書順に追加する必要があり，
レコード *value* は 0 以上の整数でなければならない．

{{{
// DAWG の構築を終了する．
bool Finish(Dawg *dawg);
}}}

DAWG の構築を終了し，完成した DAWG を *dawg* に渡す．
なお，オブジェクト *this* は初期化される．

----

== Dictionary ==

|| *Header* || nanika/dawgdic/dictionary.h ||
|| *Namespace* || nanika::dawgdic ||

{{{
const DictionaryUnit *units() const;
}}}

辞書を構成する配列の先頭要素へのポインタを返す．

{{{
SizeType size() const;
}}}

辞書を構成する配列の要素数を返す．

{{{
SizeType total_size() const;
}}}

辞書の構成に必要なメモリ量を byte 単位で返す．

{{{
// 辞書を入力ストリームから読み込む．
bool Read(std::istream *input);
}}}

入力ストリーム *input* からデータを読み込み，辞書を復元する．

{{{
// 辞書を出力ストリームに書き出す．
bool Write(std::ostream *output) const;
}}}

出力ストリーム *output* に辞書を書き出す．

{{{
// 完全一致検索．
bool Contains(const CharType *key) const;
bool Contains(const CharType *key, SizeType length) const;
}}}

辞書引きをおこなう関数であり，
キー *key* が辞書に登録されているかどうかを返す．

{{{
// 完全一致検索．
ValueType Find(const CharType *key) const;
ValueType Find(const CharType *key, SizeType length) const;
bool Find(const CharType *key, ValueType *value) const;
bool Find(const CharType *key, SizeType length, ValueType *value) const;
}}}

辞書引きをおこなう関数であり，キー *key* が辞書に登録されている場合，
関連づけられているレコード *value* を返す．
なお，キーが存在しない場合，レコードとして -1 が返される．

{{{
// 前方一致検索．
BaseType root() const;
bool has_value(BaseType index) const;
ValueType value(BaseType index) const;
bool Follow(CharType label, BaseType *index) const;
bool Follow(const CharType *s, BaseType *index);
bool Follow(const CharType *s, BaseType *index, SizeType *count);
bool Follow(const CharType *s, SizeType length, BaseType *index);
bool Follow(const CharType *s, SizeType length, BaseType *index, SizeType *count);
}}}

前方一致検索をおこなうための関数であり，
*nanika::dawgdic::!DictionaryExplorer* と同様の使い方をする．
ただし，探索位置 *index* は関数 *root()* により初期化する必要がある．

{{{
// 任意の領域を配列に割り当てる．
void Map(const void *address);
}}}

任意のアドレス *address* から始まる領域を配列に割り当てる．
ただし，先頭の 4 bytes は要素数として利用される．

{{{
// 任意の領域を配列に割り当てる．
void Map(const void *address, SizeType size);
}}}

任意のアドレス *address* から始まる領域を配列に割り当てる．

----

== !DictionaryBuilder ==

|| *Header* || nanika/dawgdic/dictionary-builder.h ||
|| *Namespace* || nanika::dawgdic ||

{{{
// DAWG から辞書を構築する．
static bool Build(const Dawg &dawg, Dictionary *dic, BaseType *num_of_unused_units = NULL);
}}}

*nanika::dawgdic::!DawgBuilder* により構築した *dawg* から辞書を構築し，
*dic* を新しい辞書に置き換えるとともに，
未使用の要素数を *num_of_unused_units* に代入する．
なお，オブジェクト *this* は初期化される．

----

== !DictionaryExplorer ==

|| *Header* || nanika/dawgdic/dictionary-explorer.h ||
|| *Namespace* || nanika::dawgdic ||

{{{
DictionaryExplorer(const Dictionary &dic);
}}}

辞書 *dic* を探索するためのオブジェクトを初期化する．

{{{
void Reset();
void Reset(const Dictionary &dic);
}}}

探索位置を初期化する．

{{{
bool Follow(CharType label);
}}}

指定されたラベル *label* を持つ遷移を辿る．

{{{
bool Follow(const CharType *s);
bool Follow(const CharType *s, SizeType *count);
bool Follow(const CharType *s, SizeType length);
bool Follow(const CharType *s, SizeType length, SizeType *count);
}}}

指定された文字列 *s* を構成するラベルを持つ遷移を辿り，
遷移に成功した回数を *count* に代入する．

{{{
bool has_value() const;
}}}

探索位置から終端への遷移が存在するかどうかを返す．

{{{
ValueType value() const;
}}}

探索位置から終端への遷移が存在するとき，
その終端に格納されているレコードを返す．

----

== !LineReader ==

|| *Header* || nanika/ios/line-reader.h ||
|| *Namespace* || nanika::ios ||

{{{
explicit LineReader(std::istream *stream, std::size_t block_size = DEFAULT_BLOCK_SIZE);
}}}

入力ストリーム *stream* からの行読み込みを
バッファリングにより高速化するためのオブジェクトを初期化する．

{{{
bool Read(std::string *line);
}}}

行を読み込み，*line* に格納する．

{{{
// Reads a line (this buffer will be broken by the next call).
bool Read(const char **line, std::size_t *length = NULL);
}}}

行を読み込み，開始位置を *line* に格納し，長さを *length* に格納する．
ただし，次の読み込みとともに，*line* の内容は破壊される．
