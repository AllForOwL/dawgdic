#summary クラスのインタフェース．

= ライブラリのインタフェース =

== 主要なインタフェース ==

ライブラリ *dawgdic* の提供する主なクラスを以下に示す．

|| *Header* || *Namespace* || *Class* ||
|| dawgdic/dawg.h || dawgdic || Dawg ||
|| dawgdic/dawg-builder.h || dawgdic || !DawgBuilder ||
|| dawgdic/dictionary.h || dawgdic || Dictionary ||
|| dawgdic/dictionary-builder.h || dawgdic || !DictionaryBuilder ||
|| dawgdic/guide.h || dawgdic || Guide ||
|| dawgdic/guide-builder.h || dawgdic || !GuideBuilder ||
|| dawgdic/completer.h || dawgdic || Completer ||
|| dawgdic/ranked-guide.h || dawgdic || RankedGuide ||
|| dawgdic/ranked-guide-builder.h || dawgdic || !RankedGuideBuilder ||
|| dawgdic/ranked-completer.h || dawgdic || !RankedCompleter ||

----

== Dawg ==

|| *Header* || dawgdic/dawg.h ||
|| *Namespace* || dawgdic ||

{{{
// 遷移数と状態数．
SizeType size() const;
SizeType num_of_transitions() const;
SizeType num_of_states() const;
}}}

DAWG を構成する遷移および状態の数を返す．

{{{
// 併合された遷移および状態の数．
SizeType num_of_merged_transitions() const;
SizeType num_of_merged_states() const;
}}}

DAWG の構築において併合された遷移および状態の数を返す．

----

== !DawgBuilder ==

|| *Header* || dawgdic/dawg-builder.h ||
|| *Namespace* || dawgdic ||

{{{
// 遷移数と状態数．
SizeType size() const;
SizeType num_of_transitions() const;
SizeType num_of_states() const;
}}}

DAWG を構成する遷移および状態の数を返す．

{{{
// 併合された遷移および状態の数．
SizeType num_of_merged_transitions() const;
SizeType num_of_merged_states() const;
}}}

呼び出し時までに併合された遷移および状態の数を返す．

{{{
// キーを DAWG に追加する．
bool Insert(const CharType *key, ValueType value = 0);
bool Insert(const CharType *key, SizeType length, ValueType value);
}}}

これらの関数は，キー *key* を DAWG に追加する．
長さ *length* が 0 のキーは追加することができない．
また，キーは辞書順に追加する必要があり，
レコード *value* は 0 以上の整数でなければならない．

{{{
// DAWG の構築を終了する．
bool Finish(Dawg *dawg);
}}}

DAWG の構築を終了し，完成した DAWG を *dawg* に渡す．
なお，オブジェクト *this* は初期化される．

----

== Dictionary ==

|| *Header* || dawgdic/dictionary.h ||
|| *Namespace* || dawgdic ||

{{{
const DictionaryUnit *units() const;
}}}

辞書を構成する配列の先頭要素へのポインタを返す．

{{{
SizeType size() const;
}}}

辞書を構成する配列の要素数を返す．

{{{
SizeType total_size() const;
}}}

辞書の構成に必要なメモリ量を byte 単位で返す．

{{{
SizeType file_size() const;
}}}

ストリームに書き出した場合のサイズを返す．

{{{
// 辞書を入力ストリームから読み込む．
bool Read(std::istream *input);
}}}

入力ストリーム *input* からデータを読み込み，辞書を復元する．

{{{
// 辞書を出力ストリームに書き出す．
bool Write(std::ostream *output) const;
}}}

出力ストリーム *output* に辞書を書き出す．

{{{
// 完全一致検索．
bool Contains(const CharType *key) const;
bool Contains(const CharType *key, SizeType length) const;
}}}

辞書引きをおこなう関数であり，
キー *key* が辞書に登録されているかどうかを返す．

{{{
// 完全一致検索．
ValueType Find(const CharType *key) const;
ValueType Find(const CharType *key, SizeType length) const;
bool Find(const CharType *key, ValueType *value) const;
bool Find(const CharType *key, SizeType length, ValueType *value) const;
}}}

辞書引きをおこなう関数であり，キー *key* が辞書に登録されている場合，
関連づけられているレコード *value* を返す．
なお，キーが存在しない場合，レコードとして -1 が返される．

{{{
// 前方一致検索．
BaseType root() const;
bool has_value(BaseType index) const;
ValueType value(BaseType index) const;
bool Follow(CharType label, BaseType *index) const;
bool Follow(const CharType *s, BaseType *index);
bool Follow(const CharType *s, BaseType *index, SizeType *count);
bool Follow(const CharType *s, SizeType length, BaseType *index);
bool Follow(const CharType *s, SizeType length, BaseType *index, SizeType *count);
}}}

前方一致検索をおこなうためのインタフェースであり，
関数 *root()* により探索開始位置を取得した後，
関数 *Follow()* によって文字あるいは文字列に対応する遷移を辿る．
探索位置から終端への遷移があるかどうかは関数 *has_value()* により確認できる．
また，終端への遷移がある場合，関数 *value()* によりレコードを取得できる．

{{{
// 任意の領域を配列に割り当てる．
void Map(const void *address);
}}}

任意のアドレス *address* から始まる領域を配列に割り当てる．
ただし，先頭の 4 bytes は要素数として利用される．

{{{
// 任意の領域を配列に割り当てる．
void Map(const void *address, SizeType size);
}}}

任意のアドレス *address* から始まる領域を配列に割り当てる．

----

== !DictionaryBuilder ==

|| *Header* || dawgdic/dictionary-builder.h ||
|| *Namespace* || dawgdic ||

{{{
// DAWG から辞書を構築する．
static bool Build(const Dawg &dawg, Dictionary *dic, BaseType *num_of_unused_units = NULL);
}}}

*dawgdic::!DawgBuilder* により構築した *dawg* から辞書を構築し，
*dic* を新しい辞書に置き換えるとともに，
未使用の要素数を *num_of_unused_units* に代入する．
なお，オブジェクト *this* は初期化される．

----

== Guide ==

|| *Header* || dawgdic/guide.h ||
|| *Namespace* || dawgdic ||

{{{
// キー補完用の辞書を入力ストリームから読み込む．
bool Read(std::istream *input);
}}}

入力ストリーム *input* からデータを読み込み，キー補完用の辞書を復元する．

{{{
// キー補完用の辞書を出力ストリームに書き出す．
bool Write(std::ostream *output) const;
}}}

出力ストリーム *output* にキー補完用の辞書を書き出す．

----

== !GuideBuilder ==

|| *Header* || dawgdic/guide-builder.h ||
|| *Namespace* || dawgdic ||

{{{
// DAWG と基本辞書からキー補完用の辞書を構築する．
static bool Build(const Dawg &dawg, const Dictionary &dic, Guide *guide);
}}}

*dawgdic::!DawgBuilder* により構築した *dawg* と，
*dawgdic::!DictionaryBuilder* により構築した *dic* から
キー補完用の辞書を構築し，*guide* を新しい辞書に置き換える．

----

== Completer ==

|| *Header* || dawgdic/completer.h ||
|| *Namespace* || dawgdic ||

{{{
// オブジェクトを初期化する．
Completer();
Completer(const Dictionary &dic, const Guide &guide);
}}}

キー補完用のオブジェクトを初期化する．
補完に用いる辞書の組 *dic* と *guide* を設定できる．

{{{
// 基本辞書およびキー補完用の辞書を切り替える．
void set_dic(const Dictionary &dic);
void set_guide(const Guide &guide);
}}}

補完に用いる辞書の組 *dic* と *guide* をそれぞれ切り替える．

{{{
// 基本辞書およびキー補完用の辞書を取得する．
const Dictionary &dic() const;
const Guide &guide() const;
}}}

補完に用いている辞書を取得する．

{{{
// キー補完を開始する．
void Start(BaseType index, const char *prefix = "");
void Start(BaseType index, const char *prefix, SizeType length);
}}}

探索開始位置 *index* に基づいてキー補完を開始する．
指定された *prefix* は探索開始位置に影響することなく，
補完結果として得られる文字列の先頭に付加される．

{{{
// 次の補完候補を取得する．
bool Next();
}}}

キー補完を逐次実行し，次の補完候補を取得する．

{{{
// 補完により取得したキーの情報を取得する．
const char *key() const;
SizeType length() const;
ValueType value() const;
}}}

関数 *key()* は NULL 文字を終端とする文字列へのポインタを返し，
関数 *length()* はキーの長さを返す．
また，関数 *value()* は関連付けられているレコードの値を返す．

----

== !RankedGuide ==

|| *Header* || dawgdic/ranked-guide.h ||
|| *Namespace* || dawgdic ||

*Guide* と同様の関数を提供する．

----

== !RankedGuideBuilder ==

|| *Header* || dawgdic/ranked-guide-builder.h ||
|| *Namespace* || dawgdic ||

*!GuideBuilder* と同様の関数を提供する．

----

== !RankedCompleter ==

|| *Header* || dawgdic/ranked-completer.h ||
|| *Namespace* || dawgdic ||

*Completer* と同様の関数を提供する．
