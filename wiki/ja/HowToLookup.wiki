#summary 辞書を用いて検索する例．

= 検索方法 =

== 完全一致検索 ==

以下の例は，辞書からキーを検索する関数である．

{{{
#include <nanika/dawgdic/dictionary.h>

// 辞書引きをおこなう．
void Lookup(const nanika::dawgdic::Dictionary &dic, const char *key) {

  // キーが辞書に登録されているかどうかを確認する．
  if (dic.Contains(key))
    std::cout << key << ": " << ": found" << std::endl;
  else
    std::cout << key << ": " << ": not found" << std::endl;

  // キーが辞書に登録されているかどうかを確認し，
  // 登録されている場合はレコードを取り出す．
  int record;
  if (dic.Find(key, &record))
    std::cout << key << ": " << ": found (" << record << ')' << std::endl;
  else
    std::cout << key << ": " << ": not found" << std::endl;
}
}}}

== 前方一致検索 ==

以下の例は，文字列に含まれるキーをすべて列挙する関数である．

{{{
#include <string>

#include <nanika/dawgdic/dictionary.h>
#include <nanika/dawgdic/dictionary-explorer.h>

// 文字列 "text" に出現するすべてのキーを見つける．
void Filter(const nanika::dawgdic::Dictionary &dic, const char *text) {

  nanika::dawgdic::DictionaryExplorer explorer(dic);
  for (const char *p = text; *p != '\0'; ++p) {

    // 始点を変更しつつ，前方一致検索をおこなう．
    explorer.Reset();
    for (const char *q = p; *q != '\0'; ++q) {

      // 遷移を一つずつ辿る．
      if (!explorer.Follow(*q))
        break;

      // 検出したキーの情報を出力する．
      if (explorer.has_value())
        std::cout << '(' << (p - text) << ", " << (q + 1 - p) << ", "
                  << explorer.value() << "): "
                  << std::string(p, q + 1 - p) << std::endl;
    }
  }
}
}}}
